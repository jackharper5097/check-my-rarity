{"version":3,"sources":["components/bar-graph.tsx","components/icons.tsx","helpers/urls.ts","helpers/delay.ts","components/lazy-component.tsx","components/smart-image.tsx","components/nft-card.tsx","helpers/open-sea.ts","helpers/theme.ts","components/nft-loader.tsx","components/lazy-list.tsx","components/types.ts","components/nft-project.tsx","helpers/trait-sort.ts","components/layout.tsx","components/nft-projects.tsx","components/home-page.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["BarGraphCell","ratio","text","textRight","className","style","position","zIndex","width","toFixed","height","display","flexDirection","opacity","flex","Icon","icon","LoadingIndicator","IconLink","url","iconUrl","href","fontSize","verticalAlign","src","alt","getProjectJsonUrl","projectKey","getNftJsonUrl","tokenId","getIpfsUrl","nftUrl","replace","delay","timeout","a","Promise","resolve","setTimeout","Date","now","globalRelayoutCallbacks","activeNotifyRelayoutId","notifyRelayout","notifyRelayoutId","i","length","callback","window","addEventListener","IntersectionObserver","observe","document","getElementsByTagName","nextLazyComponentId","LazyComponent","children","onLoad","placeholderRef","useRef","useState","shouldLoad","setShouldLoad","isDoneRef","useEffect","current","placeholder","iRelayout","push","divRect","getBoundingClientRect","screenBottom","scrollY","innerHeight","top","unsub","ref","minWidth","minHeight","SmartImage","loading","setLoading","error","setError","attemptsRef","timeoutRef","onLoadStart","clearTimeout","Math","pow","onError","Price","price","priceColor","color","symbol","toLowerCase","priceUsd","NftCardPlaceholder","props","NftCard","nft","onSelect","image","rarityScore","rank","lastSell","listing","id","name","justifyContent","external_url","openSeaLink","textAlign","attributeRarities","map","x","Fragment","trait_type","ratioScore","onClick","e","preventDefault","stopPropagation","traitType","value","fontWeight","getOpenSeaData","contractAddress","openSeaUrl","fetch","result","json","changeTheme","projectTheme","target","toCssName","key","isDark","t","theme","Object","keys","filter","join","themeTagId","existing","getElementById","remove","newElement","createElement","innerHTML","head","appendChild","ThemeSubscription","_callbacks","subscribe","forEach","NftLoader","hideIfNoListing","setNft","obj","sort","b","localeCompare","nftProjectUrl","project","contract","openSeaData","lastSellPrice","parseFloat","last_sale","total_price","payment_token","decimals","lastSellSymbol","lastSellPriceUsd","usd_price","order","orders","side","listingPrice","current_price","payment_token_contract","listingSymbol","listingPriceUsd","undefined","permalink","LazyList","items","getItemKey","ItemComponent","loadCount","setLoadCount","lastLoadCount","itemsLoaded","slice","index","s","onLoaded","item","ALL_TRAIT_VALUE","NftProjectLoader","projectRarity","setProjectRarity","loaded","loadProjectRarityData","doc","tokenLookupsSource","traits","traitSort","trait_value","tokenIds","sortTraits","tokenLookups","traitTypes","Set","traitTypeTokenLookups","includedTokenIds","flatMap","missingTokenIds","tokenIdsByRank","has","unshift","NftProject","pinnedTokenId","setTokenIds","nftListRef","traitFilters","forSell","args","selections","tokenIdsIfAll","traitKeyIfAll","entries","traitKey","traitValue","tokenLookup","find","v","tokenIdsSelected","tokenIdsToSort","tokenIdsToDisplay","selected","onReset","marginTop","marginBottom","ProjectInfo","objectFit","description","external_link","links","opensea","openSea","twitter","discord","k","includes","TraitTypesList","isExpanded","setIsExpanded","alignItems","values","some","isExpandedAll","TraitValuesList","selectedTraitItem","isAllSelected","console","log","traitTypeTokenLookupsWithCount","isSelected","count","right","Layout","setIsDark","NftProjectsLoader","projects","NftProjects","projectMetadata","NftProjectCard","location","HomePage","CharacterArea","Routing","route","pathname","split","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.33e3c29c.chunk.js","sourcesContent":["import React, { useRef } from 'react';\n\nexport const BarGraphCell = ({ ratio, text, textRight }:{ ratio: number, text?: string, textRight?: string })=>{\n    return (\n        <div className='bar-graph' style={{position:'relative'}}>\n            <div className='bar-graph-background' style={{\n                position:'absolute',\n                zIndex: 0,\n                width: `${(100 * ratio).toFixed(0)}%`,\n                height: '100%',\n                }}>\n            </div>\n            <div style={{position:'relative', zIndex: 10, display:'flex', flexDirection:'row'}}>\n                {/* Used to center main text */}\n                <div className='bar-graph-text-right' style={{opacity:0}}>\n                    {textRight}\n                </div>\n                <div className='bar-graph-text' style={{flex:1}}>\n                    {text ?? `${(100 * ratio).toFixed(2)}%`}\n                </div>\n                <div className='bar-graph-text-right' style={{}}>\n                    {textRight}\n                </div>\n            </div>\n            \n        </div>\n    );\n}","import React from 'react';\nimport { AiFillTwitterCircle } from \"react-icons/ai\";\nimport { FaDiscord, FaEthereum, FaGithub } from \"react-icons/fa\";\nimport { HiLink } from \"react-icons/hi\";\nimport { VscChevronDown, VscChevronRight, VscLoading } from \"react-icons/vsc\";\n\nexport type IconName = \n| 'twitter'\n| 'discord'\n| 'github'\n| 'link'\n| 'eth'\n| 'collapsed'\n| 'expanded'\n| 'loading'\n;\nexport const Icon = ({icon}:{icon:IconName})=>{\n    switch(icon){\n        case 'twitter': return <AiFillTwitterCircle/>;\n        case 'discord': return <FaDiscord/>;\n        case 'github': return <FaGithub/>;\n        case 'link': return <HiLink/>;\n        case 'eth': return <FaEthereum/>;\n        case 'collapsed': return <VscChevronRight/>;\n        case 'expanded': return <VscChevronDown/>;\n        case 'loading': return <VscLoading/>;\n    }\n\n    return <></>;\n};\n\nexport const LoadingIndicator = ()=>{\n    return (\n        <div className='loading'>\n            <Icon icon='loading'/>\n        </div>\n    );\n};\n\nexport const IconLink = ({url, icon, iconUrl}: {url?:string, icon?: IconName, iconUrl?:string})=>{\n    return (\n        <>\n            {!!url && <a href={url}\n                style={{display:'inline-block', width: 32, height: 32, fontSize: 20 }}\n            >\n                {!!icon && <Icon icon={icon}/>}\n                {!!iconUrl && <img style={{width:20, height: 20, verticalAlign: 'middle'}} src={iconUrl} alt='link'/>}\n            </a>}\n        </>\n    );\n};","export const getProjectsJsonUrl = ()=>`/data/projects.json`;\nexport const getProjectJsonUrl = (projectKey:string)=>`/data/${projectKey}/project.json`;\nexport const getNftJsonUrl = (projectKey:string, tokenId: string)=>`/data/${projectKey}/${tokenId}.json`;\nexport const getIpfsUrl = (nftUrl:string) => nftUrl.replace('ipfs://', 'https://gateway.pinata.cloud/ipfs/');\nexport const getOpenSeaTokenUrl = (contractAddress:string, tokenId:string) => `https://opensea.io/assets/${contractAddress}/${tokenId}`;\n\n","export async function delay(timeout: number): Promise<void> {\n    return await new Promise((resolve) => {\n        setTimeout(resolve, timeout);\n    });\n}","import React, { ReactNode, useEffect, useRef, useState } from 'react';\nimport { delay } from '../helpers/delay';\n\nconst debug_timeStart = Date.now();\nconst globalRelayoutCallbacks = [] as (null | (()=>boolean))[];\nlet activeNotifyRelayoutId = 0;\nconst notifyRelayout = async () => {\n\n    // Cancellable\n    activeNotifyRelayoutId++;\n    let notifyRelayoutId = activeNotifyRelayoutId;\n    await delay(100);\n\n    // console.log('LazyComponent notifyRelayout', {notifyRelayoutId});\n    \n    let i = 0;\n    while(i < globalRelayoutCallbacks.length){\n        const callback = globalRelayoutCallbacks[i];\n        if(callback && callback()){\n            await delay(25);\n        }\n        i++;\n\n        if(notifyRelayoutId !== activeNotifyRelayoutId){\n            // Cancelled\n            // console.log('LazyComponent notifyRelayout - Cancelled', {notifyRelayoutId});\n            return;\n        }\n    }\n};\nwindow.addEventListener('scroll', notifyRelayout);\nwindow.addEventListener('load', ()=>{\n    const observer = new IntersectionObserver(notifyRelayout);\n    // Observe any element\n    observer.observe(document.getElementsByTagName('body')[0]);\n});\n\nlet nextLazyComponentId = 0;\n\nexport const LazyComponent = ({ \n    children,\n    onLoad,\n}:{ \n    children: ReactNode,\n    onLoad?: () => void,\n })=>{\n\n    const placeholderRef = useRef(null as null | HTMLDivElement);\n    const [shouldLoad, setShouldLoad] = useState(false);\n    const isDoneRef = useRef(false);\n    const lazyComponentId = useRef(nextLazyComponentId++);\n\n    useEffect(() => {\n        // console.log('LazyComponent useEffect', {lazyComponentId});\n\n        if( !placeholderRef.current ){ \n            // console.log('LazyComponent useEffect - SKIP placeholderRef is missing', {lazyComponentId});\n            return; \n        }\n        const placeholder = placeholderRef.current;\n        isDoneRef.current = false;\n      \n        const loadIfVisible = () => {\n            // console.log('LazyComponent useEffect:loadIfVisible', {lazyComponentId});\n\n            if( !placeholderRef.current ){ \n                // console.log('LazyComponent useEffect:loadIfVisible - SKIP placeholderRef is missing', {lazyComponentId});\n                return false; \n            }\n            if( isDoneRef.current ){ \n                // console.log('LazyComponent useEffect:loadIfVisible - SKIP isDone', {lazyComponentId});\n                return false; \n            }\n\n            const divRect = placeholder.getBoundingClientRect();\n            const screenBottom = window.scrollY + window.innerHeight;\n            const isOnScreen = divRect.top < screenBottom;\n\n            if(!isOnScreen){ return false; }\n            // console.log(`isOnScreen`,{ time: Date.now() - debug_timeStart, iRelayout, divRect, screenBottom, isOnScreen });\n            \n            isDoneRef.current = true;\n            unsub();\n            setShouldLoad(true);\n            notifyRelayout();\n            onLoad?.();\n\n            return true;\n        };\n\n        const iRelayout = globalRelayoutCallbacks.length;\n        globalRelayoutCallbacks.push(loadIfVisible);\n        const unsub = ()=>{\n            globalRelayoutCallbacks[iRelayout] = null;\n        };\n\n        notifyRelayout();\n\n        return () => {\n            isDoneRef.current = true;\n            unsub();\n        };\n    },[children, onLoad]);\n\n    // console.log('LazyComponent RENDER', {lazyComponentId});\n    return (\n        <>  \n            {!shouldLoad && <div ref={placeholderRef} style={{minWidth: 100, minHeight: 100}}/>}\n            {shouldLoad && children}\n        </>\n    );\n};","import React, { CSSProperties, useEffect, useRef, useState } from \"react\";\nimport { getIpfsUrl } from \"../helpers/urls\";\nimport { LoadingIndicator } from \"./icons\";\nimport { LazyComponent } from \"./lazy-component\";\n\nexport const SmartImage = ({src, alt, style}:{src:undefined |null|string, alt: string, style?: CSSProperties})=>{\n\n    const MAX_ATTEMPTS = 5;\n\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(false);\n\n    const attemptsRef = useRef(1);\n\n    const timeoutRef = useRef(0 as unknown as ReturnType<typeof setTimeout>);\n\n    const onRetry = () => {\n        clearTimeout(timeoutRef.current);\n        if(attemptsRef.current > MAX_ATTEMPTS){ return; }\n    \n        setError(true);\n        onLoadStart();\n    };\n    const onLoadStart = () => {\n        clearTimeout(timeoutRef.current);\n        if(attemptsRef.current > MAX_ATTEMPTS){ return; }\n\n        timeoutRef.current = setTimeout(()=>{\n            attemptsRef.current++;\n            setError(false);\n        }, Math.pow(2, attemptsRef.current) * 1000);\n    };\n    const onLoad = () => {\n        clearTimeout(timeoutRef.current);\n        setLoading(false);\n    };\n    useEffect(()=>{\n        return ()=>{\n            clearTimeout(timeoutRef.current);\n        };\n    },[]);\n\n    if(!src){ return <></>; }\n    return (\n        <>\n            <LazyComponent>\n                {loading && (<LoadingIndicator/>)}\n                {!error && (\n                    <img key={attemptsRef.current} alt={alt} style={style} src={getIpfsUrl(src)} onLoadStart={onLoadStart} onLoad={onLoad} onError={onRetry}/>\n                )}\n            </LazyComponent>\n        </>\n    );\n}\n","import React from 'react';\nimport { INftRarity } from '@crypto-dev-amigos/common';\nimport { LazyComponent } from './lazy-component';\nimport { getIpfsUrl } from '../helpers/urls';\nimport { BarGraphCell } from './bar-graph';\nimport { Icon, IconLink, LoadingIndicator } from './icons';\nimport { SmartImage } from './smart-image';\nimport { OnSelectTraitValue } from './types';\n\nexport type INftRarityWithExtra = INftRarity & {\n    openSeaLink?: string;\n    lastSell?: {\n        price: number;\n        symbol?: string;\n        priceUsd?: number;\n    },\n    listing?: {\n        price: number;\n        symbol?: string;\n        priceUsd?: number;\n    },\n};\n\nconst Price = ({price}:{price?: {\n    price: number;\n    symbol?: string;\n    priceUsd?: number;\n}}) => {\n    \n    if(!price){ return <span>{'-?-'}</span>}\n\n    const priceColor = price.price < 0.1 ? '#FF0000' \n        : price.price < 0.25 ? '#FF3300' \n        : price.price < 0.5 ? '#FF7700' \n        : price.price < 1 ? '#FFBB00' \n        : 'unset';\n\n    return (\n        <>\n            <div style={{display:'inline-block', minWidth: 100, color: priceColor}}>\n                <span>{price.price.toFixed(3)}</span>\n                {price.symbol && (\n                    price.symbol.toLowerCase() === 'eth' ? <span className='black-or-white'><Icon icon='eth'/></span> \n                    : price.symbol.toLowerCase() === 'weth' ? <span style={{color: '#ca477b'}}><Icon icon='eth'/></span> \n                    : <span>{price.symbol}</span>\n                )}\n            </div>\n            <div style={{display:'inline-block', minWidth: 100, color: priceColor}}>\n                <span>{price.priceUsd ? ` $${price.priceUsd.toFixed(2)}`:''}</span>\n            </div>\n        </>\n    );\n}\n\nexport const NftCardPlaceholder = (props:{})=>{\n    return (\n        <>\n            <div className={'nft-card'}>\n                <LoadingIndicator/>\n                <div style={{height: 300}}></div>\n            </div>\n        </>\n    );\n}\n\nexport const NftCard = ({nft, onSelect}:{ nft: INftRarityWithExtra, onSelect?: OnSelectTraitValue }) => {\n\n    return (\n        <>\n            <div className={'nft-card'}>\n                <div className={'nft-card-image'}>\n                        <SmartImage alt='nft' src={nft.nft.image}/>\n                </div>\n                <div className='nft-card-header'>\n                    <div className='nft-card-header-item'>\n                        <div className='nft-card-header-item-label'>Rarity Score:</div>\n                        <div className='nft-card-header-item-value'>{nft.rarityScore.toFixed(2)}</div>\n                    </div>\n                    <div className='nft-card-header-item'>\n                        <div className='nft-card-header-item-label'>Rank:</div>\n                        <div className='nft-card-header-item-value'>{nft.rank}</div>\n                    </div>\n                    <div className='nft-card-header-item-2'>\n                        <div className='nft-card-header-item-label'>Last Sell:</div>\n                        <div className='nft-card-header-item-value'><Price price={nft.lastSell}/></div>\n                    </div>\n                    <div className='nft-card-header-item-2'>\n                        <div className='nft-card-header-item-label'>Listing:</div>\n                        <div className='nft-card-header-item-value'><Price price={nft.listing}/></div>\n                    </div>\n                    <div className='nft-card-header-token-id'>TokenId: {nft.nft.id}</div>\n                    <div className='nft-card-header-title'>{nft.nft.name}</div>\n                    \n                </div>\n                <div style={{display:'flex', flexDirection:'row', justifyContent:'center'}}>\n                        <IconLink url={nft.nft.external_url} icon='link'/>\n                        <IconLink url={nft.openSeaLink} iconUrl='/media/opensea.png'/>\n                    </div>\n                <div className='nft-card-content'>\n                    <div className='nft-card-stats'>\n                        <div className='nft-card-stats-row nft-card-stats-title' style={{ fontSize:`0.8em` }}>\n                            <div className='nft-card-stats-cell' style={{textAlign:'left'}}>{'Trait'}</div>\n                            <div className='nft-card-stats-cell' style={{textAlign:'right'}}>{'Rarity Score'}</div>\n                        </div>\n                        <div className='nft-card-stats-row nft-card-stats-title' style={{ fontSize:`0.8em` }}>\n                            <div className='nft-card-stats-cell' style={{textAlign:'right'}}>{''}</div>\n                            <div className='nft-card-stats-cell'>{'Commonality'}</div>\n                        </div>\n                        {nft.attributeRarities.map(x=>(\n                            <React.Fragment key={x.trait_type}>\n                                <div className='nft-card-stats-row'>\n                                    <div className='nft-card-stats-cell nft-card-stats-title' style={{textAlign:'left'}}>{x.trait_type}</div>\n                                    <div className='nft-card-stats-cell numeric-value' style={{textAlign:'right'}}>{`${x.ratioScore.toFixed(2)}`}</div>  \n                                </div>\n                                <div className='nft-card-stats-row'>\n                                    <div className={`nft-card-stats-cell ${onSelect?'link':''}`} style={{textAlign:'right'}}>\n                                        <span \n                                            onClick={(e) => {\n                                                if(!onSelect){return;}\n\n                                                e.preventDefault();\n                                                e.stopPropagation();\n                                                onSelect({traitType: x.trait_type, value: x.value});\n                                            }}\n                                            style={x.value !== \"[Missing]\"?{fontWeight:'bold'}:{}}>{x.value}</span>\n                                    </div>\n                                    <div className='nft-card-stats-cell numeric-value'>\n                                        <BarGraphCell ratio={x.ratio} />\n                                    </div>                              \n                                </div>\n                            </React.Fragment>\n                        ))}\n                    </div>\n                </div>\n            </div>\n        </>\n    );\n};\n\n","export const getOpenSeaData = async ({contractAddress, tokenId}: {contractAddress:string, tokenId:string})=>{\n\n    const openSeaUrl = `https://api.opensea.io/api/v1/asset/${contractAddress}/${tokenId}/`;\n    const result = await fetch(openSeaUrl);\n    const json = await result.json() as {\n        token_id: string,\n        num_sales?: number,    \n        last_sale?: {\n            /** BigNumber */\n            total_price: string,\n            payment_token: {\n                symbol: string,\n                decimals: number,\n                usd_price: string,\n            },\n        },\n        orders?: {\n            current_price: string,\n            payment_token_contract: {\n                symbol: string,\n                decimals: number,\n                usd_price: string,\n            },\n            /** \n             * - 1 for buy orders \n             * - 1 for sell orders \n             * */\n            side: 0|1,\n        }[],\n        /** Open sea link */\n        permalink:string,\n    };\n\n    return json;\n};\n","import { IProjectTheme } from \"@crypto-dev-amigos/common\";\n\nexport const changeTheme = (projectTheme: undefined | null | IProjectTheme, target = ':root') => {\n\n    const toCssName = (key: string)=> key.replace(/[A-Z]/g,(x)=>'-' + x.toLowerCase());\n\n    const isDark = projectTheme?.isDark ?? true;\n\n    const t = projectTheme ?? {} as Record<string,string | boolean>;\n    const theme = `\n${target} {\n    ${Object.keys(t)\n        .filter(key => t[key] && typeof t[key] === 'string')\n        .map(key => `\n    --${toCssName(key)}: ${t[key]};`).join('')}\n\n    --black-or-white: ${isDark ? '#FFFFFF' : '#000000'}\n}\n    `;\n\n    const themeTagId = '__themeStyleOverride' + target;\n\n    const existing = document.getElementById(themeTagId);\n    existing?.remove();\n    \n    const newElement = document.createElement('style');\n    newElement.innerHTML = theme;\n    newElement.id = themeTagId;\n    document.head.appendChild(newElement);\n\n    ThemeSubscription.changeTheme(isDark);\n};\n\n\ntype Callback = (isDark:boolean) => void;\nconst _callbacks = [] as Callback[];\nexport const ThemeSubscription = {\n    subscribe: (callback: Callback) => {\n        _callbacks.push(callback);\n    },\n    changeTheme: (isDark:boolean)=>{_callbacks.forEach(x=>x(isDark))},\n};","import React, { useEffect, useState } from 'react';\nimport { INftProjectRarityDocument, INftRarityDocument } from '@crypto-dev-amigos/common';\nimport { INftRarityWithExtra, NftCard, NftCardPlaceholder } from './nft-card';\nimport { getNftJsonUrl, getProjectJsonUrl } from '../helpers/urls';\nimport { getOpenSeaData } from '../helpers/open-sea';\nimport { changeTheme } from '../helpers/theme';\nimport { OnSelectTraitValue } from './types';\n\nexport const NftLoader = ({ \n    projectKey, tokenId, contractAddress, onSelect, \n    hideIfNoListing\n }:{ \n    projectKey: string, tokenId: string, contractAddress?: string, onSelect?: OnSelectTraitValue, \n    hideIfNoListing?: boolean\n})=>{\n\n    const [nft, setNft] = useState(null as null | INftRarityWithExtra);\n    const [error,setError] = useState('');\n\n    useEffect(() => {\n        (async () => {\n\n            let obj = null as null | INftRarityDocument;\n            try{\n                const nftUrl = getNftJsonUrl(projectKey, tokenId);\n                // console.log('NftLoader', {nftUrl});\n                const result = await fetch(nftUrl);\n                obj = await result.json() as INftRarityDocument;\n            }catch{\n                setError('Not Found');\n                return;\n            }\n\n            obj.attributeRarities.sort((a,b)=>a.trait_type.localeCompare(b.trait_type));\n            setNft(obj);\n\n            // Try to get contractAddress from project data\n            if(!contractAddress){\n                // Load from project\n                const nftProjectUrl = getProjectJsonUrl(projectKey);\n                // console.log('projectKey', { projectKey, nftProjectUrl });\n                const result = await fetch(nftProjectUrl);\n                const obj = await result.json() as INftProjectRarityDocument;\n                contractAddress = obj.project.contract;\n\n                changeTheme(obj.project.theme);\n\n                if(!contractAddress){ return; }\n            }\n\n            // Load open sea data\n            const openSeaData = await getOpenSeaData({ contractAddress, tokenId });\n            const lastSellPrice = parseFloat(openSeaData.last_sale?.total_price ?? '0') / Math.pow(10, openSeaData.last_sale?.payment_token.decimals ?? 0);\n            const lastSellSymbol = openSeaData.last_sale?.payment_token.symbol;\n            const lastSellPriceUsd = lastSellPrice * parseFloat(openSeaData.last_sale?.payment_token.usd_price ?? '1');\n\n            const order = openSeaData.orders?.filter(x=>x.side===1)?.[0];\n            const listingPrice = parseFloat(order?.current_price ?? '0') / Math.pow(10, order?.payment_token_contract.decimals ?? 0);\n            const listingSymbol =order?.payment_token_contract.symbol;\n            const listingPriceUsd = listingPrice * parseFloat(order?.payment_token_contract.usd_price ?? '1');\n\n            setNft({\n                ...obj, \n                lastSell: openSeaData.last_sale ? {\n                    price: lastSellPrice, \n                    symbol: lastSellSymbol, \n                    priceUsd : lastSellPriceUsd,\n                } : undefined,\n                listing: order ? {\n                    price: listingPrice, \n                    symbol: listingSymbol, \n                    priceUsd : listingPriceUsd,\n                } : undefined,\n                openSeaLink: openSeaData.permalink,\n            })\n\n        })();\n    }, [projectKey, tokenId]);\n\n    // console.log('NftLoader RENDER', {projectKey, tokenId});\n\n    if(hideIfNoListing && !nft?.listing){\n        return <></>;\n    }\n\n    return (\n        <>\n            {error && <div>{error}</div>}\n            {!nft && !error && <NftCardPlaceholder />}\n            {nft && <NftCard nft={nft} onSelect={onSelect}/>}\n        </>\n    );\n};\n\n","import React, { useRef } from 'react';\nimport { useState } from 'react';\nimport { LazyComponent } from './lazy-component';\n\nexport const LazyList = <T extends {}>({\n    items, \n    getItemKey, \n    ItemComponent \n}:{ \n    items:T[], \n    getItemKey:(item:T)=>string, \n    ItemComponent: (props:{item:T}) => JSX.Element,\n})=>{\n\n    const PAGE_SIZE = 12;\n    const NEAR_END_COUNT = 3;\n    const [loadCount, setLoadCount] = useState(PAGE_SIZE);\n    const lastLoadCount = useRef(PAGE_SIZE);\n    lastLoadCount.current = loadCount;\n\n    const onLoaded = (index:number)=>{\n        // Skip if already loaded more\n        if(lastLoadCount.current !== loadCount){ return; }\n\n        // Skip if not near the end\n        if(index + NEAR_END_COUNT < loadCount){ return; }\n\n        // Load more\n        // console.log('# LazyList: loadMore', {loadCount});\n        setLoadCount(s=> s + PAGE_SIZE);\n    }\n\n    const itemsLoaded = items.slice(0, loadCount);\n\n    \n    // console.log('LazyList RENDER', {itemsLength: items.length, loadedLength: itemsLoaded.length});\n    return (\n        <>\n            {itemsLoaded.map((x,index)=>(\n                <React.Fragment key={getItemKey(x)} >\n                    <LazyComponent onLoad={() => onLoaded(index)}>\n                        <ItemComponent item={x}/>\n                    </LazyComponent>\n                </React.Fragment>\n            ))}\n        </>\n    );\n};\n\n","export const ALL_TRAIT_VALUE ='[All]';\nexport type TraitFilters = { [traitType: string]: { value:string, tokenIdsIfAll: Set<number> } };\nexport type OnSelectTraitValue = (args:{ traitType: string, value: string }) => void;","import React, { useEffect, useRef, useState } from 'react';\nimport type { INftProjectMetadataDocument, INftProjectRarityDocument, INftRarity, MISSING_ATTRIBUTE_VALUE as MISSING_ATTRIBUTE_VALUE_TYPE } from '@crypto-dev-amigos/common';\nimport { NftCard } from './nft-card';\nimport { LazyList } from './lazy-list';\nimport { NftLoader } from './nft-loader';\nimport { getIpfsUrl, getNftJsonUrl, getProjectJsonUrl } from '../helpers/urls';\nimport { BarGraphCell } from './bar-graph';\nimport { changeTheme } from '../helpers/theme';\nimport { Icon, IconLink, IconName, LoadingIndicator } from './icons';\nimport { SmartImage } from './smart-image';\nimport { ALL_TRAIT_VALUE, OnSelectTraitValue, TraitFilters } from './types';\nimport { TraitGraph } from './trait-graph';\nimport { HoverArgs, TraitGrid } from './trait-grid';\nimport { sortTraits } from '../helpers/trait-sort';\n\n// Workaround for importing implementation\nconst MISSING_ATTRIBUTE_VALUE: typeof MISSING_ATTRIBUTE_VALUE_TYPE = `[Missing]`;\n\nexport const NftProjectLoader = ({ projectKey }:{ projectKey:string })=>{\n\n    const [projectRarity, setProjectRarity] = useState(null as null | INftProjectRarityData);\n\n    useEffect(() => {\n        (async () => {\n            const nftProjectUrl = getProjectJsonUrl(projectKey);\n            // console.log('projectKey', { projectKey, nftProjectUrl });\n            const result = await fetch(nftProjectUrl);\n            const obj = await result.json() as INftProjectRarityDocument;\n\n            // changeTheme(obj.project.theme);\n\n            const loaded = loadProjectRarityData(obj);\n\n            setProjectRarity(loaded);\n        })();\n    }, [projectKey]);\n\nreturn (\n    <>\n        {!projectRarity && <LoadingIndicator/>}\n        {projectRarity && <NftProject projectKey={projectKey} projectRarity={projectRarity} />}\n    </>\n);\n};\n\ntype INftProjectRarityData = {\n    project: INftProjectMetadataDocument;\n    tokenIdsByRank: INftProjectRarityDocument['tokenIdsByRank']\n    tokenLookups: (INftProjectRarityDocument['tokenLookups'][number] & {\n        ratio: number;\n    })[],\n    traitTypes: string[];\n    contractAddress?: string;\n};\nconst loadProjectRarityData = (doc: INftProjectRarityDocument): INftProjectRarityData => {\n    const tokenLookupsSource = sortTraits(doc.tokenLookups,'default');\n\n    const traitTypes = [...new Set(tokenLookupsSource.map(x=>x.trait_type))];\n\n    // Add [Missing] and [All]\n    traitTypes.forEach(traitType => {\n        const traitTypeTokenLookups = tokenLookupsSource\n            .filter(x=>x.trait_type === traitType);\n\n        const includedTokenIds = new Set(traitTypeTokenLookups.flatMap(x=>x.tokenIds));\n        const missingTokenIds = doc.tokenIdsByRank.filter(t => !includedTokenIds.has(t));\n        // Missing\n        if(missingTokenIds.length){\n            tokenLookupsSource.unshift({\n                trait_type: traitType,\n                trait_value: MISSING_ATTRIBUTE_VALUE,\n                tokenIds: missingTokenIds\n            });\n        }\n\n        // All\n        tokenLookupsSource.unshift({\n            trait_type: traitType,\n            trait_value: ALL_TRAIT_VALUE,\n            tokenIds: doc.tokenIdsByRank,\n        });\n    });\n\n    const tokenLookups = tokenLookupsSource.map(x=>({\n        ...x,\n        ratio: x.tokenIds.length / doc.tokenIdsByRank.length,\n    }));\n\n    // Sort tokenLookups\n    tokenLookups.sort();\n\n    return {\n        project: doc.project,\n        contractAddress: doc.project.contract,\n        tokenIdsByRank: doc.tokenIdsByRank,\n        tokenLookups,\n        traitTypes,\n    };\n};\n\nexport const NftProject = ({ projectKey, projectRarity }:{ projectKey:string, projectRarity:INftProjectRarityData}) => {\n\n    const [pinnedTokenId, setPinnedTokenId] = useState('');\n    const [tokenIds, setTokenIds] = useState(new Set(projectRarity.tokenIdsByRank));\n    const nftListRef = useRef(null as null | HTMLDivElement)\n    const traitFilters = useRef({} as TraitFilters);\n\n    const [sort, setSort] = useState('rarity' as 'rarity' | 'tokenId');\n    const [forSell, setForSell] = useState(false);\n\n    const onSelect = (args: { traitType: string, value: string }) => {\n        const selections = traitFilters.current;\n        selections[args.traitType] = {value: args.value, tokenIdsIfAll: new Set([]) };\n\n        // Calculate tokenIdsIfAll\n        Object.keys(selections).forEach(traitKeyIfAll => {\n            let tokenIdsIfAll = new Set(projectRarity.tokenIdsByRank);\n            Object.entries(selections).forEach(([traitKey,traitValue])=>{\n                const tokenLookup = projectRarity.tokenLookups.find(v => v.trait_type === traitKey && v.trait_value === traitValue.value);\n                if(!tokenLookup){ return; }\n                if(traitKey === traitKeyIfAll){ return; }\n    \n                tokenIdsIfAll = new Set(tokenLookup.tokenIds.filter(t => tokenIdsIfAll.has(t) ));\n            });\n            selections[traitKeyIfAll].tokenIdsIfAll = tokenIdsIfAll;\n        });\n\n        let tokenIdsSelected = new Set(projectRarity.tokenIdsByRank);\n        Object.entries(selections).forEach(([traitKey,traitValue])=>{\n            const tokenLookup = projectRarity.tokenLookups.find(v => v.trait_type === traitKey && v.trait_value === traitValue.value);\n            if(!tokenLookup){ return; }\n\n            tokenIdsSelected = new Set(tokenLookup.tokenIds.filter(t => tokenIdsSelected.has(t) ));\n        });\n\n        setTokenIds(tokenIdsSelected);\n        // nftListRef.current?.scrollIntoView({behavior:'smooth'});\n    };\n    const onReset = () => {\n        traitFilters.current = {};\n        setTokenIds(new Set(projectRarity.tokenIdsByRank));\n    };\n\n    const tokenIdsToSort = [...tokenIds];\n    if( sort === 'tokenId'){\n        tokenIdsToSort.sort((a,b)=>a - b);\n    }\n    const tokenIdsToDisplay = [pinnedTokenId,...tokenIdsToSort].filter(x=>x);\n    return (\n        <>\n            <div className='panel-container'>\n                \n                <div className='panel-trait-types'>\n                    <TraitTypesList projectRarity={projectRarity} tokenIds={tokenIds} selected={traitFilters.current} onSelect={onSelect} onReset={onReset}/>\n                </div>\n                <div className='panel-nft-list'>\n                    <div className='child-project-info'>\n                        <ProjectInfo project={projectRarity.project}/>\n                    </div>\n                    {/* <h3 style={{marginTop: 32, marginBottom: 16}}>Analysis</h3>\n                    <div>\n                        <TraitGraph projectKey={projectKey} projectRarity={projectRarity} tokenIds={tokenIds} selected={traitFilters.current} onSelect={onSelect}/>\n                    </div>\n                    <div>\n                        <TraitGrid projectKey={projectKey} projectRarity={projectRarity} tokenIds={tokenIds} selected={traitFilters.current} onSelect={onSelect}\n                            HoverComponent={({args})=><HoverComponent hoverArgs={args} projectRarity={projectRarity} tokenIds={tokenIds} selected={traitFilters.current} onSelect={onSelect}/>}\n                        />\n                    </div> */}\n                    <h3 style={{marginTop: 32, marginBottom: 16}}>NFTs</h3>\n                    {/* <div style={{display:'flex', flexDirection:'row', justifyContent:'space-between'}}>\n                        <div style={{textAlign:'left'}}>\n                            Search: <input type='text' style={{maxWidth: 100}} value={pinnedTokenId} onChange={(e)=>setPinnedTokenId(e.target.value)}/>\n                        </div>\n                        <div style={{flex:1}}/>\n                        <div style={{textAlign:'left', marginRight: 32}}>\n                            <div className='hover link' style={{marginLeft:4}} onClick={()=>{setForSell(s=>!s)}}>Show Only For Sell</div>\n                        </div>\n                        <div style={{display:'flex', flexDirection:'row', justifyContent:'flex-end'}}>\n                            Sort: \n                            <div className='hover link' style={{marginLeft:4}} onClick={()=>{setSort('rarity')}}>Rarity</div>\n                            <div className='hover link' style={{marginLeft:4}} onClick={()=>{setSort('tokenId')}}>TokenId</div>\n                        </div>\n                    </div> */}\n                    <div className='nft-list' ref={nftListRef}>\n                        {projectRarity && (\n                            <LazyList key={pinnedTokenId + sort} items={tokenIdsToDisplay} getItemKey={x=>`${x}`} ItemComponent={({item})=>(\n                                // <div\n                                //     className='link'\n                                //     onClick={()=>window.location.href=`${projectKey}/${item}`}\n                                // >\n                                    <NftLoader projectKey={projectKey} tokenId={`${item}`} contractAddress={projectRarity.contractAddress} onSelect={onSelect} hideIfNoListing={forSell} />\n                                // </div>\n                            )}/>\n                        )}\n                    </div>\n                </div>\n            </div>\n        </>\n    );\n};\n\nconst HoverComponent = ({ \n    projectRarity, \n    tokenIds, selected, onSelect,\n    hoverArgs,\n}:{ \n     projectRarity:INftProjectRarityData, \n     tokenIds: Set<number>, selected:TraitFilters, onSelect: OnSelectTraitValue,\n     hoverArgs: HoverArgs,\n})=>{\n    // const traitInfo = traitFilters.current.\n\n    const {trait,tokenId} = hoverArgs;\n    const traitInfo = selected?.[trait.trait_type];\n    const isSelected = traitInfo?.value === trait.trait_value;\n    const nftCount = trait.tokenIds.length;\n    const ratio = trait.tokenIds.length / projectRarity.tokenIdsByRank.length;\n\n    return (\n        <div className='hover-popup'>\n            <div style={{textAlign:'left'}}>{trait.trait_type}</div>\n            <div className={`nft-trait-value link ${isSelected ? 'nft-trait-value-selected':''}`} \n                onClick={()=>onSelect({traitType: trait.trait_type, value: trait.trait_value})}>\n                <BarGraphCell ratio={ratio} text={trait.trait_value} textRight={`${nftCount}`}/>\n            </div>\n            <div style={{textAlign:'left'}}>#{tokenId}</div>\n            <div style={{textAlign:'right'}}>Rank {projectRarity.tokenIdsByRank.findIndex(x=>x === tokenId) + 1}</div>\n        </div>\n    );\n};\n\nexport const ProjectInfo = ({project}:{ project:INftProjectMetadataDocument})=>{\n    return (\n        <>\n            <div className='project-info-image'>\n                    <SmartImage alt='project' src={project.image} style={{objectFit:'contain'}}/>\n            </div>\n            <div className='project-info'>\n                \n                <div className='project-info-title'>{project.name}</div>\n                <div className='project-info-description'>{project.description}</div>\n                {!!project.external_link && (\n                    <div className='project-info-link'>\n                        <a href={getIpfsUrl(project.external_link)}>{project.external_link}</a>\n                    </div>\n                )}\n                <div className='link'>\n                    <IconLink url={project.external_link} icon='link'/>\n                    <IconLink url={project.links?.opensea} iconUrl='/media/opensea.png'/>\n                    <IconLink url={project.links?.openSea} iconUrl='/media/opensea.png'/>\n                    <IconLink url={project.links?.twitter} icon='twitter'/>\n                    <IconLink url={project.links?.discord} icon='discord'/>\n                    {Object.entries(project.links??{})\n                        .filter(([k])=> !'opensea openSea discord twitter'.includes(k))\n                        .map(([k,v])=>(\n                            <IconLink key={k} url={v} icon='link'/>\n                        ))}\n                </div>\n            </div>\n        </>\n    );\n};\n\nexport const TraitTypesList = ({ \n    projectRarity, tokenIds, selected, onSelect, onReset\n}:{ \n    projectRarity:INftProjectRarityData, tokenIds: Set<number>, \n    selected:TraitFilters, \n    onSelect: OnSelectTraitValue,\n    onReset: () => void,\n})=>{\n    const [isExpanded, setIsExpanded] = useState(true);\n   \n    return (\n        <>\n            <div className='nft-trait-types-header'>\n                <div className='nft-trait-types-header-expandable link' onClick={()=>setIsExpanded(s=>!s)}>\n                    <div style={{display:'flex', alignItems: 'center', justifyContent: 'center'}}>\n                        Trait Filters {isExpanded ? <Icon icon='expanded'/> : <Icon icon='collapsed'/> }\n                    </div>\n                </div>\n                <div className='nft-trait-types-header-simple'>\n                    <div>Trait Filters</div>\n                </div>\n            </div>\n                <div className='nft-trait-type-header link' onClick={onReset}>\n                    <div style={{display:'flex'}}>\n                        {Object.values(selected).some(x => x.value !== ALL_TRAIT_VALUE) && (\n                            <>\n                                <span>Reset</span>\n                                {'❌'}\n                            </>\n                        )}\n                        <span>&nbsp;</span>\n                    </div>\n                </div>\n            <div className='nft-trait-types'>\n                {projectRarity.traitTypes.map(x=>(\n                    <React.Fragment key={x}>\n                        <TraitValuesList traitType={x} projectRarity={projectRarity} \n                            isExpandedAll={isExpanded}\n                            tokenIds={tokenIds} selected={selected} onSelect={onSelect} />\n                    </React.Fragment>\n                ))}\n            </div>\n        </>\n    );\n};\n\nexport const TraitValuesList = ({ \n    traitType, projectRarity, \n    isExpandedAll,\n    tokenIds, selected, onSelect\n}:{ \n     traitType: string, projectRarity:INftProjectRarityData, \n     isExpandedAll: boolean,\n     tokenIds: Set<number>, selected:TraitFilters, onSelect: OnSelectTraitValue\n})=>{\n   \n    const [isExpanded, setIsExpanded] = useState(isExpandedAll);\n    const toggleIsExpanded = ()=>{setIsExpanded(s=>!s)};\n    useEffect(()=>{\n        setIsExpanded(isExpandedAll);\n    },[isExpandedAll]);\n\n    const traitTypeTokenLookups = projectRarity.tokenLookups\n        .filter(x=>x.trait_type === traitType);\n   \n    const selectedTraitItem = selected[traitType] ?? {\n        value: ALL_TRAIT_VALUE,\n        tokenIdsIfAll: tokenIds,\n    };\n    const isAllSelected = selectedTraitItem.value === ALL_TRAIT_VALUE;\n    console.log('TraitValuesList', {isAllSelected, selectedTraitItem});\n\n    const traitTypeTokenLookupsWithCount = traitTypeTokenLookups.map(x=>({\n        x, \n        isSelected: selectedTraitItem.value === x.trait_value,\n        count: x.tokenIds.filter(t => (selectedTraitItem.tokenIdsIfAll??tokenIds).has(t)).length\n    }));\n\n    return (\n        <div className='nft-trait-type'>\n            <div className='nft-trait-type-header link' onClick={()=>toggleIsExpanded()}>\n                <div style={{display:'flex', alignItems:'center'}}>\n                    {!isAllSelected && (\n                        <div style={{\n                            position:'absolute',\n                            right: 4,\n                            }}\n                            onClick={(e)=>{ \n                                e.preventDefault();\n                                e.stopPropagation();\n                                onSelect({traitType, value: ALL_TRAIT_VALUE});\n                            }}\n                        >\n                            {'❌'}\n                        </div>\n                    )}\n                    {traitType}\n                    {isExpanded ? <Icon icon='expanded'/> : <Icon icon='collapsed'/> }\n                </div>\n                {!isExpanded && (\n                    <div className='nft-trait-value'>\n                        {selectedTraitItem.value}\n                    </div>\n                )}\n            </div>\n            {isExpanded && (\n                <div className='nft-trait-values'>\n                    {traitTypeTokenLookupsWithCount\n                    .filter(({count,isSelected})=>count||isSelected)\n                    .map(({x,count,isSelected})=>(\n                        <React.Fragment key={`${x.trait_type}:${x.trait_value}`}>\n                            <div className={`nft-trait-value link ${isSelected ? 'nft-trait-value-selected':''}`} onClick={()=>onSelect({traitType: x.trait_type, value: x.trait_value})}>\n                                <BarGraphCell ratio={x.ratio} text={x.trait_value} textRight={`${count}`}/>\n                            </div>\n                        </React.Fragment>\n                    ))}\n                </div>\n            )}\n        </div>\n    );\n};\n\n","import { Trait } from \"./types\";\n\nexport type TraitSortKind = 'rarity' | 'default';\nexport const sortTraits = (traits:Trait[], traitSort: TraitSortKind) => {\n\n    const t = [...traits]\n        .sort((a,b) => a.trait_value.localeCompare(b.trait_value))\n        .sort((a,b) => a.trait_type.localeCompare(b.trait_type))\n        ;\n\n    if( traitSort === 'rarity'){\n        return t.sort((a,b) => a.tokenIds.length - b.tokenIds.length);\n    }\n\n    return t;\n};","import React, { useEffect, useState } from \"react\";\nimport { ThemeSubscription } from \"../helpers/theme\";\nimport { Icon } from \"./icons\";\n\nexport const Layout = ({ children }:{ children:JSX.Element }) => {\n\n    const [isDark, setIsDark] = useState(true);\n\n    useEffect(()=>{\n        ThemeSubscription.subscribe(setIsDark);\n    },[]);\n\n    return (\n        <>\n            <div className='header'>\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col-md-3 col-6\">\n                            <a style={{display:\"flex\"}} href=\"/\">\n                            <img style={{height: 60}}\n                                src={isDark ? '/media/logo.png' : '/media/logo.png'} alt='site-logo'/>\n                            </a>\n                        </div>\n                            <div className=\"col-md-9 col-6 float-end\">\n                            <a className=\"icon\" href=\"/\">\n                                <Icon icon='twitter'/>\n                            </a>\n                            <a className=\"icon\" href=\"/\">\n                                <Icon icon='discord'/>\n                            </a>\n                            <a className=\"menu\" href=\"/\">\n                                FAQ\n                            </a>\n                        </div>\n                    </div>\n                </div>\n            </div>\n                {children}\n        </>\n    );\n};\n","import React, { useEffect, useState } from 'react';\nimport { INftProjectMetadata, INftProjectsDocument } from '@crypto-dev-amigos/common';\nimport { LazyList } from './lazy-list';\nimport { NftLoader } from './nft-loader';\nimport { getIpfsUrl, getProjectsJsonUrl } from '../helpers/urls';\nimport { LazyComponent } from './lazy-component';\nimport { changeTheme } from '../helpers/theme';\nimport { SmartImage } from './smart-image';\nimport { LoadingIndicator } from './icons';\nimport { ProjectInfo } from './nft-project';\n\nexport const NftProjectsLoader = (props:{ })=>{\n\n    const [projects, setProjectRarity] = useState(null as null | INftProjectsDocument);\n\n    useEffect(() => {\n        (async () => {\n            const nftProjectUrl = getProjectsJsonUrl();\n            // console.log('projectKey', { projectKey, nftProjectUrl });\n            const result = await fetch(nftProjectUrl);\n            const obj = await result.json() as INftProjectsDocument;\n            setProjectRarity(obj);\n        })();\n    }, []);\n\nreturn (\n    <>\n        {!projects && <LoadingIndicator/>}\n        {projects && <NftProjects projects={projects} />}\n    </>\n);\n};\n\nexport const NftProjects = ({ projects }:{ projects: INftProjectsDocument }) => {\n    return (\n        <>\n            <div className='row'>\n                {projects && (\n                    <LazyList items={projects.projects} getItemKey={x=>`${x.projectKey}`} ItemComponent={({item})=>(\n                        <NftProjectCard projectKey={item.projectKey} project={item.projectMetadata} />\n                    )}/>\n                )}\n            </div>\n        </>\n    );\n};\n\n\nexport const NftProjectCard = ({projectKey, project}:{ projectKey:string, project: INftProjectMetadata }) => {\n\n    // const targetId =  projectKey + '_theme';\n    // useEffect(()=>{\n    //     changeTheme(project.theme, `#${targetId}`);\n    // }, [targetId]);\n\n    return (\n        <>\n            <div className={'nft-card col-md-3'} \n                style={{position:'relative'}} \n                onClick={()=>window.location.href=`${projectKey}`}\n            >\n                {/* Disable Links */}\n                {/* <div style={{position:'absolute', top:0, bottom:0, left:0, right: 0, opacity: 0}}></div> */}\n                <ProjectInfo project={project}/>\n            </div>\n        </>\n    );\n};\n\n","import { NftProjectsLoader } from \"./nft-projects\";\nimport { Icon } from \"./icons\";\nimport { OtherRarityTools } from \"./other-rarity-tools\";\n\nexport const HomePage = ()=>{\n\n    return (\n        <div\n            style={{display:'flex', flexDirection:'column', justifyContent:'space-between', alignItems:'center', minHeight:'calc(100vh - 100px)'}}>\n            <div className=\"container\">\n            <h1 className=\"heading\">Newest Collections Added</h1>\n            <NftProjectsLoader/>\n            </div>\n            {<CharacterArea/>\n            /* <OtherRarityTools/> */}\n        </div>\n    );\n};\n\n\nconst CharacterArea = (props:{})=>{\n    return (\n        <>\n            {\n        <div className='footer'>\n            <div className=\"container\">\n                <div className=\"row\">\n                    <div className=\"col-md-3 col-12\">\n                        <a style={{display:\"flex\"}} href=\"/\">\n                        <img style={{height: 60}}\n                            src={'/media/logo.png'} alt='site-logo'/>\n                        </a>\n                    </div>\n                    <div className=\"col-md-6 col-12 float-center\">\n                        Copyright reserved by CheckMyRarity\n                    </div>\n\n                    <div className=\"col-md-3 col-12 float-end\">\n                        <a className=\"icon\" href=\"/\">\n                            <Icon icon='twitter'/>\n                        </a>\n                        <a className=\"icon\" href=\"/\">\n                            <Icon icon='discord'/>\n                        </a>\n                    </div>\n                </div>\n            </div>\n        </div>\n            /* <div style={{display:'flex', flexDirection:'row'}}>\n                <Character punkId={4856} name={'@NotChris'} link={`https://twitter.com/HemanCalvin`}/>\n                <Character punkId={578} name={'@RickLove'} link={`https://twitter.com/Rick_00_Love`}/>\n            </div> */\n            }\n        </>\n    );\n}\n\nconst Character = ({punkId, name, link}:{punkId:number, name:string, link?:string})=>{\n    return (\n        <>\n            {/* <div className={link ? 'link':''}\n                style={{padding: 8}}\n                onClick={(e)=>{\n                    if(!link){ return; } \n                    e.preventDefault();\n                    e.stopPropagation();\n                    window.open(link);\n                }}>\n                <div>\n                    <img style={{width: 150, height:150, objectFit:'contain'}} \n                        src={`/media/punk${punkId}.png`} alt=\"punk\"/>\n                </div>\n                <div>\n                    {!link && name}\n                    {!!link && <a href={link}>{`${name}`}</a>}\n                </div>\n                <div>\n                    {`OneDayPunk #${punkId}`}\n                </div>\n            </div> */}\n        </>\n    );\n}","import React from 'react';\nimport './CssReset.css';\nimport './App.css';\nimport { NftLoader } from './components/nft-loader';\nimport { NftProjectLoader } from './components/nft-project';\nimport { NftProjectsLoader } from './components/nft-projects';\nimport { Layout } from './components/layout';\nimport { HomePage } from './components/home-page';\n\nfunction App() {\n\n return (\n  <Layout>\n      <Routing/>\n  </Layout>\n );\n}\n\nconst Routing = (props:{}) => {\n  const route = window.location.pathname.split('/');\n  const projectKey = route[1] ?? undefined;\n  const tokenId = route[2] ?? undefined;\n\n  console.log('route', {route, projectKey, tokenId});\n\n  if(projectKey && tokenId){\n    return (\n      <div className=\"App\">\n        <div className='nft-container-single'>\n          <NftLoader projectKey={projectKey} tokenId={tokenId}/>\n        </div>\n      </div>\n    );\n  }\n\n  if(projectKey){\n    return (\n      <div className=\"App\">\n        <NftProjectLoader projectKey={projectKey}/>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"App\">\n        <HomePage/>\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}